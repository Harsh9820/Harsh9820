{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/Textform.js","Components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","msg","Navbar","mode","to","title","id","class","onClick","toggleMode","htmlFor","Textform","useState","text","setText","textarea","useRef","style","color","heading","rows","onChange","event","target","value","placeholder","backgroundColor","ref","newText","toUpperCase","showAlert","toLowerCase","current","select","document","execCommand","trimmedText","trim","split","join","accept","file","files","reader","FileReader","onload","result","readAsText","length","About","myStyle","App","changeMode","setAlert","message","setTimeout","body","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7de31554.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{props.alert.msg}</strong> \r\n            {/*<button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">About Us</Link>\r\n                        </li>\r\n                    </ul>\r\n                    <div class={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useRef, useState} from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const [text, setText] = useState(\"\");\r\n    const textarea = useRef(null);\r\n\r\n    const convertUp = () => {\r\n        \r\n        if(text !== \"\"){\r\n            let newText = text.toUpperCase();\r\n            setText(newText);\r\n            props.showAlert(\"Converted Uppercase.\",\"info\");\r\n        }\r\n        else{\r\n            props.showAlert(\"Please Type some words first.\",\"danger\");\r\n        }\r\n    }\r\n\r\n    const convertLow = () => {\r\n        \r\n        if(text !== \"\"){\r\n            let newText = text.toLowerCase();\r\n            setText(newText);\r\n            props.showAlert(\"Converted Lowercase.\",\"info\");\r\n        }\r\n        else{\r\n            props.showAlert(\"Please Type some words first.\",\"danger\");\r\n        }\r\n    }\r\n\r\n    const clearText = () => {\r\n        \r\n        if(text !== \"\"){\r\n            setText('');\r\n            props.showAlert(\"All Text cleared.\",\"warning\");\r\n        }\r\n        else{\r\n            props.showAlert(\"Please Type some words first.\",\"danger\");\r\n        }\r\n    }\r\n\r\n    const copyText = () => {\r\n        \r\n        if(text !== \"\"){\r\n            textarea.current.select();\r\n            document.execCommand('copy');\r\n            props.showAlert(\"Text Copied.\",\"info\");\r\n        }\r\n        else{\r\n            props.showAlert(\"Please Type some words first.\",\"danger\");\r\n        }\r\n    }\r\n\r\n    const removeExtra = () => {\r\n        \r\n        if(text !== \"\"){\r\n            let trimmedText = text.trim().split(/ +/).join(' ');\r\n            setText(trimmedText);\r\n            props.showAlert(\"Removed Extra Spaces.\",\"warning\");\r\n        }\r\n        else{\r\n            props.showAlert(\"Please Type some words first.\",\"danger\");\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const readTxt = (event) => {\r\n        let file = event.target.files[0];\r\n        let reader = new FileReader();\r\n        reader.onload = function(event){\r\n            setText(event.target.result);\r\n        };\r\n        reader.readAsText(file);\r\n        props.showAlert(\"Text file uploaded.\",\"info\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color: props.mode==='dark'?'white':'#282828'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"myBox\"></label>\r\n                    <textarea className=\"form-control\" id=\"myBox\" rows=\"10\" onChange = {handleChange} value = {text} placeholder=\"Enter Text here\"\r\n                     style={{backgroundColor: props.mode==='dark'?'#282828':'white',color: props.mode==='dark'?'white':'#282828'}}\r\n                     ref = {textarea}>\r\n                    \r\n                    </textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary\" onClick={convertUp}>Convert to UpperCase</button>\r\n                <button className=\"btn btn-primary mx-3\" onClick={convertLow}>Convert to LowerCase</button>\r\n                \r\n                <button className=\"btn btn-primary\" onClick={copyText}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-3\" onClick={removeExtra}>Remove Extra Spaces</button>\r\n                <button className=\"btn btn-warning\" onClick={clearText}>Clear Text</button>\r\n                <hr />\r\n                <input type=\"file\" className=\"btn btn-secondary my-3\" accept=\"text/plain\" onChange = {readTxt}/>\r\n            </div>\r\n\r\n            <div className=\"container my-3 text-center\" style={{color: props.mode==='dark'?'white':'#282828'}}>\r\n                <h3>Your Text Summary</h3>\r\n                <p>Words - {text.split(\" \").length - 1}</p>\r\n                <p>Characters - {text.length}</p>\r\n                <p>Minutes to read - {0.008 * text.split(\" \").length - 0.008}</p>\r\n                <p>Number of Sentences - {text.split(\".\").length - 1}</p>\r\n                <h4 className=\"my-3\">Preview</h4>\r\n                <p>{text}</p>\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About(props) {\r\n    let myStyle = {\r\n        backgroundColor: props.mode==='dark'?'#282828':'white',\r\n        color: props.mode==='dark'?'white':'#282828'\r\n    }\r\n  return (\r\n    <div class = \"Container\" style={myStyle}>\r\n        <h2>About Us</h2>\r\n        <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingOne\" >\r\n                <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\r\n                    Accordion Item #1\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n                    Accordion Item #2\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n                    Accordion Item #3\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n","import './App.css';\nimport React, {useState} from 'react';\nimport Alert from './Components/Alert';\nimport Navbar from './Components/Navbar';\nimport Textform from './Components/Textform';\nimport About from './Components/About';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link\n} from 'react-router-dom';\n\nfunction App() {\n  const [mode, changeMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if(mode === 'light'){\n      changeMode('dark');\n      document.body.style.backgroundColor = '\t#282828';\n      showAlert(\"Dark mode Enabled successfully\",\"success\");\n    }\n    else{\n      changeMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode Enabled successfully\",\"info\");\n    }\n  }\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"Wordic\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alert={alert}/>\n        <div className=\"container my-3\">\n          \n            <Routes>\n              <Route exact path=\"/about\" element={<About mode={mode}/>} />\n                \n              <Route exact path=\"/\" element={<Textform heading = \"Enter Text to Analyze\" mode={mode} showAlert={showAlert}/>} />\n                \n            </Routes>\n           \n        </div>\n      </Router> \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}